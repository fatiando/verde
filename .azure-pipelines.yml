# Configuration for Azure Pipelines
########################################################################################

# Only build the master branch, tags, and PRs (on by default) to avoid building random
# branches in the repository until a PR is opened.
trigger:
  branches:
    include:
    - master
    - refs/tags/*


jobs:

# Linux
########################################################################################
- job:
  displayName: 'Style Checks'

  pool:
    vmImage: 'ubuntu-16.04'

  variables:
    CONDA_INSTALL_EXTRA: "black flake8 pylint"
    PYTHON: '3.7'

  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'

  - bash: echo "##vso[task.prependpath]/usr/share/miniconda/bin"
    displayName: Add conda to PATH

  # Get the Fatiando CI scripts
  - bash: git clone --branch=1.2.0 --depth=1 https://github.com/fatiando/continuous-integration.git
    displayName: Fetch the Fatiando CI scripts

  # Setup dependencies and build a conda environment
  - bash: source continuous-integration/azure/setup-miniconda.sh
    displayName: Setup Miniconda

  # Show installed pkg information for postmortem diagnostic
  - bash: |
      set -x -e
      source activate testing
      conda list
    displayName: List installed packages

  # Check that the code passes format checks
  - bash: |
      set -x -e
      source activate testing
      make check
    displayName: Formatting check (black and flake8)
    condition: succeededOrFailed()

  # Check that the code passes linting checks
  - bash: |
      set -x -e
      source activate testing
      make lint
    displayName: Linting (pylint)
    condition: succeededOrFailed()


# Mac
########################################################################################
- job:
  displayName: 'Mac'

  pool:
    vmImage: 'macOS-10.13'

  variables:
    CONDA_REQUIREMENTS: requirements.txt
    CONDA_REQUIREMENTS_DEV: requirements-dev.txt
    CONDA_INSTALL_EXTRA: "codecov"
    VERDE_DATA_DIR: "$(Agent.TempDirectory)/.verde/data"

  strategy:
    matrix:
      Python38:
        python.version: '3.8'
        PYTHON: '3.8'
      Python37:
        python.version: '3.7'
        PYTHON: '3.7'
      Python36:
        python.version: '3.6'
        PYTHON: '3.6'
      Python37-Optional:
        python.version: '3.7'
        PYTHON: '3.7'
        CONDA_INSTALL_EXTRA: "codecov pykdtree numba"
        NUMBA_NUM_THREADS: 1
        OMP_NUM_THREADS: 1
        MKL_NUM_THREADS: 1
      Python36-Optional:
        python.version: '3.6'
        PYTHON: '3.6'
        CONDA_INSTALL_EXTRA: "codecov pykdtree numba"
        NUMBA_NUM_THREADS: 1
        OMP_NUM_THREADS: 1
        MKL_NUM_THREADS: 1

  steps:

  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation
  # directory We need to take ownership if we want to update conda or install packages
  # globally
  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation

  # Get the Fatiando CI scripts
  - bash: git clone --branch=1.2.0 --depth=1 https://github.com/fatiando/continuous-integration.git
    displayName: Fetch the Fatiando CI scripts

  # Setup dependencies and build a conda environment
  - bash: source continuous-integration/azure/setup-miniconda.sh
    displayName: Setup Miniconda

  # Show installed pkg information for postmortem diagnostic
  - bash: |
      set -x -e
      source activate testing
      conda list
    displayName: List installed packages

  # Copy the test data to the cache folder
  - bash: |
      set -x -e
      mkdir -p ${VERDE_DATA_DIR}/master
      cp -r data/* ${VERDE_DATA_DIR}/master
    displayName: Copy test data to cache

  # Install the package
  - bash: |
      set -x -e
      source activate testing
      python setup.py bdist_wheel
      pip install dist/*
    displayName: Install the package

  # Run the tests
  - bash: |
      set -x -e
      source activate testing
      ls ${VERDE_DATA_DIR}/master
      make test
    displayName: Test

  # Build the documentation
  - bash: |
      set -x -e
      source activate testing
      make -C doc clean all
    displayName: Build the documentation

  # Upload test coverage if there were no failures
  - bash: |
      set -x -e
      source activate testing
      coverage xml
      echo "Uploading coverage to Codecov"
      codecov -e PYTHON AGENT_OS
    env:
      CODECOV_TOKEN: $(codecov.token)
    condition: succeeded()
    displayName: Upload coverage


# Windows
########################################################################################
- job:
  displayName: 'Windows'

  pool:
    vmImage: 'vs2017-win2016'

  variables:
    CONDA_REQUIREMENTS: requirements.txt
    CONDA_REQUIREMENTS_DEV: requirements-dev.txt
    CONDA_INSTALL_EXTRA: "codecov"
    VERDE_DATA_DIR: "$(Agent.TempDirectory)/.verde/data"

  strategy:
    matrix:
      Python38:
        python.version: '3.8'
        PYTHON: '3.8'
      Python37:
        python.version: '3.7'
        PYTHON: '3.7'
      Python36:
        python.version: '3.6'
        PYTHON: '3.6'
      Python37-Optional:
        python.version: '3.7'
        PYTHON: '3.7'
        CONDA_INSTALL_EXTRA: "codecov pykdtree numba"
        NUMBA_NUM_THREADS: 1
        OMP_NUM_THREADS: 1
        MKL_NUM_THREADS: 1
      Python36-Optional:
        python.version: '3.6'
        PYTHON: '3.6'
        CONDA_INSTALL_EXTRA: "codecov pykdtree numba"
        NUMBA_NUM_THREADS: 1
        OMP_NUM_THREADS: 1
        MKL_NUM_THREADS: 1

  steps:

  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH

  # Get the Fatiando CI scripts
  - script: git clone --branch=1.2.0 --depth=1 https://github.com/fatiando/continuous-integration.git
    displayName: Fetch the Fatiando CI scripts

  # Setup dependencies and build a conda environment
  - script: continuous-integration/azure/setup-miniconda.bat
    displayName: Setup Miniconda

  # Show installed pkg information for postmortem diagnostic
  - bash: |
      set -x -e
      source activate testing
      conda list
    displayName: List installed packages

  # Copy the test data to the cache folder
  - bash: |
      set -x -e
      mkdir -p ${VERDE_DATA_DIR}/master
      cp -r data/* ${VERDE_DATA_DIR}/master
    displayName: Copy test data to cache

  # Install the package that we want to test
  - bash: |
      set -x -e
      source activate testing
      python setup.py sdist --formats=zip
      pip install dist/*
    displayName: Install the package

  # Run the tests
  - bash: |
      set -x -e
      source activate testing
      ls ${VERDE_DATA_DIR}/master
      make test
    displayName: Test

  # Upload test coverage if there were no failures
  - bash: |
      set -x -e
      source activate testing
      coverage report -m
      coverage xml
      codecov -e PYTHON AGENT_OS
    env:
      CODECOV_TOKEN: $(codecov.token)
    condition: succeeded()
    displayName: Upload coverage
