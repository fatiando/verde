"""
Base class for gridders.
"""
import numpy as np
import xarray as xr
from sklearn.base import BaseEstimator

from . import grid_coordinates


class BaseGridder(BaseEstimator):
    """
    """

    def grid(self, region, shape):
        easting, northing = grid_coordinates(region, shape)
        data = self.predict(easting, northing)
        if not isinstance(data, tuple):
            data = (data,)
        east_lines = easting[0, :]
        north_lines = northing[:, 0]
        coords = dict(self._dims[0]=north_lines, self._dims[1]=east_lines)
        attrs = {'Generated by': repr(self)}
        data_vars = {}
        for data_array, data_name in zip(data, self._data_names):
            data_vars[data_name] = (self._dims, data_array, attrs)
        datagrid = xr.Dataset(data_vars, coords=coords, attrs=attrs)
        return datagrid

    def profile(self, begin, end, size):
        easting, northing, distances = self.profile_coordinates(begin, end,
                                                                size)
        data = self.predict(easting, northing)
        if not isinstance(data, tuple):
            data = (data,)
        columns_names = [dim for dim in self._dims]
        columns.append('distance')
        columns_names.extend(self._data_names)
        columns = [northing, easting, distances]
        columns.extend(data)
        data_dict = {name: value for name, value in zip(column_names, columns)}
        table = pd.DataFrame(data_dict)
        return table


class CartesianMixin():
    """
    """

    _dims = ['northing', 'easting']

        east1, north1 = begin
        east2, north2 = end
        separation = np.sqrt((east1 - east2)**2 + (north1 - north2)**2)
        distances = np.linspace(0, separation, size)
        angle = np.arctan2(north2 - north1, east2 - east1)
        easting = east1 + distances*np.cos(angle)
        northing = north1 + distances*np.sin(angle)

class ScalarMixin():
    """
    """

    _data_names = ['value']


class Vector2DMixin():
    """
    """

    _data_names = ['east_component', 'north_component']


class Vector3DMixin():
    """
    """
    _data_names = ['east_component', 'north_component', 'vertical_component']
