"""
Generators of synthetic datasets.
"""
import numpy as np
from sklearn.utils.validation import check_is_fitted

from ..base import BaseGridder
from ..utils import check_region


class CheckerBoard(BaseGridder):
    r"""
    Generate synthetic data in a checkerboard pattern.

    The mathematical model is:

    .. math::

        f(e, n) = a
        \sin\left(\frac{2\pi}{w_e} e\right)
        \cos\left(\frac{2\pi}{w_n} n\right)

    in which :math:`e` is the easting coordinate, :math:`n` is the northing
    coordinate, :math:`a` is the amplitude, and :math:`w_e` and :math:`w_n` are
    the wavelengths in the east and north directions, respectively.

    The model will evaluated on random points or on a regular grid depending on
    the value of *scatter*.

    Parameters
    ----------
    amplitude : float
        The amplitude of the checkerboard undulations.
    w_east : float
        The wavelength in the east direction. Defaults to half of the West-East
        size of the evaluating region.
    w_north : float
        The wavelength in the north direction. Defaults to half of the
        South-North size of the evaluating region.

    Examples
    --------

    >>> # Lower printing precision to shorten this example
    >>> import pandas as pd; pd.set_option('precision', 1)
    >>> import xarray as xr; _ = xr.set_options(display_width=60)
    >>> synth = CheckerBoard().fit()
    >>> # Default values for the region and wavelengths are selected by fit()
    >>> print(synth)
    CheckerBoard(amplitude=1000, w_east=2500.0, w_north=2500.0)
    >>> # grid produces an xarray.Dataset with data on a regular grid
    >>> grid = synth.grid()
    >>> print(grid)
    <xarray.Dataset>
    Dimensions:   (easting: 101, northing: 101)
    Coordinates:
      * northing  (northing) float64 0.0 50.0 100.0 150.0 ...
      * easting   (easting) float64 0.0 50.0 100.0 150.0 ...
    Data variables:
        scalars   (northing, easting) float64 0.0 125.3 ...
    Attributes:
        metadata:  Generated by: CheckerBoard(amplitude=1000,...
    >>> # Use the random_state argument to seed the random number generator
    >>> table = synth.scatter(random_state=0)
    >>> # scatter and profile generate pandas.DataFrame
    >>> print(table.head())
       easting  northing  scalars
    0   2744.1    4532.8    222.3
    1   3575.9    3870.2   -404.4
    2   3013.8    1665.7   -482.6
    3   2724.4     405.5    280.2
    4   2118.3    2036.2   -322.8
    >>> profile = synth.profile(point1=(0, 0), point2=(2500, 2500), size=100)
    >>> print(profile.head())
       distance  easting  northing  scalars
    0       0.0      0.0       0.0      0.0
    1      35.7     25.3      25.3     63.3
    2      71.4     50.5      50.5    125.6
    3     107.1     75.8      75.8    185.8
    4     142.8    101.0     101.0    243.1

    """

    def __init__(self, amplitude=1000, w_east=None, w_north=None):
        self.amplitude = amplitude
        self.w_east = w_east
        self.w_north = w_north

    def fit(self, region=(0, 5000, 0, 5000)):
        """
        Set the region in which the checkerboard will be evaluated.

        If the wavelengths are not supplied, will set them to half of the
        region extent in each dimension.

        Parameters
        ----------
        region : list
            The boundaries (``[W, E, S, N]``) of a given region in Cartesian or
            geographic coordinates.

        """
        check_region(region)
        w, e, s, n = region
        if self.w_east is None:
            self.w_east = (e - w)/2
        if self.w_north is None:
            self.w_north = (n - s)/2
        self.region_ = region
        return self

    def predict(self, easting, northing):
        """
        Evaluate the checkerboard function on a given set of points.

        Parameters
        ----------
        easting : array
            The values of the West-East coordinates of each point.
        northing : array
            The values of the South-North coordinates of each point.

        Returns
        -------
        data : array
            The evaluated checkerboard function.

        """
        check_is_fitted(self, ['region_'])
        data = (self.amplitude *
                np.sin((2*np.pi/self.w_east)*easting) *
                np.cos((2*np.pi/self.w_north)*northing))
        return data
