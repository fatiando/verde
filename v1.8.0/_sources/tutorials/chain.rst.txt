
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/chain.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_chain.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_chain.py:


Chaining Operations
===================

Often, a data processing pipeline looks like the following:

#. Apply a blocked mean or median to the data
#. Remove a trend from the blocked data
#. Fit a spline to the residual of the trend
#. Grid using the spline and restore the trend

The :class:`verde.Chain` class allows us to created gridders that perform
multiple operations on data. Each step in the chain filters the input and
passes the result along to the next step. For gridders and trend estimators,
filtering means fitting the model and passing along the residuals (input data
minus predicted data). When predicting data, the predictions of each step are
added together.

Other operations, like :class:`verde.BlockReduce` and :class:`verde.BlockMean`
change the input data values and the coordinates but don't impact the
predictions because they don't implement the
:meth:`~verde.base.BaseGridder.predict` method.

.. note::

    The :class:`~verde.Chain` class was inspired by the
    :class:`sklearn.pipeline.Pipeline` class, which doesn't serve our purposes
    because it only affects the feature matrix, not what we would call *data*
    (the target vector).

For example, let's create a pipeline to grid our sample bathymetry data.

.. GENERATED FROM PYTHON SOURCE LINES 39-69

.. code-block:: default

    import matplotlib.pyplot as plt
    import numpy as np
    import pygmt
    import pyproj

    import verde as vd

    data = vd.datasets.fetch_baja_bathymetry()
    region = vd.get_region((data.longitude, data.latitude))
    # The desired grid spacing in degrees
    spacing = 10 / 60
    # Use Mercator projection because Spline is a Cartesian gridder
    projection = pyproj.Proj(proj="merc", lat_ts=data.latitude.mean())
    proj_coords = projection(data.longitude.values, data.latitude.values)

    fig = pygmt.Figure()
    fig.coast(region=region, projection="M20c", land="#666666")
    pygmt.makecpt(cmap="viridis", series=[data.bathymetry_m.min(), data.bathymetry_m.max()])
    fig.plot(
        x=data.longitude,
        y=data.latitude,
        color=data.bathymetry_m,
        cmap=True,
        style="c0.05c",
    )
    fig.basemap(frame=True)
    fig.colorbar(frame='af+l"bathymetric depth [m]"')
    fig.show()





.. image-sg:: /tutorials/images/sphx_glr_chain_001.png
   :alt: chain
   :srcset: /tutorials/images/sphx_glr_chain_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>




.. GENERATED FROM PYTHON SOURCE LINES 70-72

We'll create a chain that applies a blocked median to the data, fits a
polynomial trend, and then fits a standard gridder to the trend residuals.

.. GENERATED FROM PYTHON SOURCE LINES 72-82

.. code-block:: default


    chain = vd.Chain(
        [
            ("reduce", vd.BlockReduce(np.median, spacing * 111e3)),
            ("trend", vd.Trend(degree=1)),
            ("spline", vd.Spline()),
        ]
    )
    print(chain)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Chain(steps=[('reduce',
                  BlockReduce(reduction=<function median at 0x7fab4c1501f0>,
                              spacing=18500.0)),
                 ('trend', Trend(degree=1)), ('spline', Spline(mindist=0))])




.. GENERATED FROM PYTHON SOURCE LINES 83-89

Calling :meth:`verde.Chain.fit` will automatically run the data through the
chain:

#. Apply the blocked median to the input data
#. Fit a trend to the blocked data and output the residuals
#. Fit the spline to the trend residuals

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: default


    chain.fit(proj_coords, data.bathymetry_m)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Chain(steps=[(&#x27;reduce&#x27;,
                  BlockReduce(reduction=&lt;function median at 0x7fab4c1501f0&gt;,
                              spacing=18500.0)),
                 (&#x27;trend&#x27;, Trend(degree=1)), (&#x27;spline&#x27;, Spline(mindist=0))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">Chain</label><div class="sk-toggleable__content"><pre>Chain(steps=[(&#x27;reduce&#x27;,
                  BlockReduce(reduction=&lt;function median at 0x7fab4c1501f0&gt;,
                              spacing=18500.0)),
                 (&#x27;trend&#x27;, Trend(degree=1)), (&#x27;spline&#x27;, Spline(mindist=0))])</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 93-102

Now that the data has been through the chain, calling
:meth:`verde.Chain.predict` will sum the results of every step in the chain
that has a ``predict`` method. In our case, that will be only the
:class:`~verde.Trend` and :class:`~verde.Spline`.

We can verify the quality of the fit by inspecting a histogram of the
residuals with respect to the original data. Remember that our spline and
trend were fit on decimated data, not the original data, so the fit won't be
perfect.

.. GENERATED FROM PYTHON SOURCE LINES 102-112

.. code-block:: default


    residuals = data.bathymetry_m - chain.predict(proj_coords)

    plt.figure()
    plt.title("Histogram of fit residuals")
    plt.hist(residuals, bins="auto", density=True)
    plt.xlabel("residuals (m)")
    plt.xlim(-1500, 1500)
    plt.show()




.. image-sg:: /tutorials/images/sphx_glr_chain_002.png
   :alt: Histogram of fit residuals
   :srcset: /tutorials/images/sphx_glr_chain_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 113-116

Likewise, :meth:`verde.Chain.grid` creates a grid of the combined trend and
spline predictions. This is equivalent to a *remove-compute-restore*
procedure that should be familiar to the geodesists among us.

.. GENERATED FROM PYTHON SOURCE LINES 116-132

.. code-block:: default


    grid = chain.grid(
        region=region,
        spacing=spacing,
        projection=projection,
        dims=["latitude", "longitude"],
        data_names="bathymetry",
    )
    grid = vd.distance_mask(
        data_coordinates=(data.longitude, data.latitude),
        maxdist=spacing * 111e3,
        grid=grid,
        projection=projection,
    )
    grid






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
    Dimensions:     (latitude: 61, longitude: 59)
    Coordinates:
      * longitude   (longitude) float64 245.0 245.2 245.3 ... 254.4 254.5 254.7
      * latitude    (latitude) float64 20.0 20.17 20.33 20.5 ... 29.66 29.82 29.99
    Data variables:
        bathymetry  (latitude, longitude) float64 -3.621e+03 -3.709e+03 ... nan nan
    Attributes:
        metadata:  Generated by Chain(steps=[(&#x27;reduce&#x27;,\n              BlockReduc...</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-9ec55cb8-e8bc-40d6-a897-b454f7c4c0da' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-9ec55cb8-e8bc-40d6-a897-b454f7c4c0da' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>latitude</span>: 61</li><li><span class='xr-has-index'>longitude</span>: 59</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-c0dcf11f-8bd2-4532-8752-5d278b625398' class='xr-section-summary-in' type='checkbox'  checked><label for='section-c0dcf11f-8bd2-4532-8752-5d278b625398' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>longitude</span></div><div class='xr-var-dims'>(longitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>245.0 245.2 245.3 ... 254.5 254.7</div><input id='attrs-a52f03e2-52af-484b-b162-ceadaedd49fb' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-a52f03e2-52af-484b-b162-ceadaedd49fb' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5d53b804-1ad2-43ec-8de7-c92d2e518ad7' class='xr-var-data-in' type='checkbox'><label for='data-5d53b804-1ad2-43ec-8de7-c92d2e518ad7' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([245.      , 245.167328, 245.334655, 245.501983, 245.66931 , 245.836638,
           246.003966, 246.171293, 246.338621, 246.505948, 246.673276, 246.840603,
           247.007931, 247.175259, 247.342586, 247.509914, 247.677241, 247.844569,
           248.011897, 248.179224, 248.346552, 248.513879, 248.681207, 248.848534,
           249.015862, 249.18319 , 249.350517, 249.517845, 249.685172, 249.8525  ,
           250.019828, 250.187155, 250.354483, 250.52181 , 250.689138, 250.856466,
           251.023793, 251.191121, 251.358448, 251.525776, 251.693103, 251.860431,
           252.027759, 252.195086, 252.362414, 252.529741, 252.697069, 252.864397,
           253.031724, 253.199052, 253.366379, 253.533707, 253.701034, 253.868362,
           254.03569 , 254.203017, 254.370345, 254.537672, 254.705   ])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>latitude</span></div><div class='xr-var-dims'>(latitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>20.0 20.17 20.33 ... 29.82 29.99</div><input id='attrs-51cdc8fb-7460-4aad-afb5-0730c30e78b1' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-51cdc8fb-7460-4aad-afb5-0730c30e78b1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d1ee1879-4d93-4a79-a948-a585754410fb' class='xr-var-data-in' type='checkbox'><label for='data-d1ee1879-4d93-4a79-a948-a585754410fb' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([20.      , 20.166522, 20.333044, 20.499565, 20.666087, 20.832609,
           20.999131, 21.165653, 21.332175, 21.498697, 21.665218, 21.83174 ,
           21.998262, 22.164784, 22.331306, 22.497827, 22.664349, 22.830871,
           22.997393, 23.163915, 23.330437, 23.496958, 23.66348 , 23.830002,
           23.996524, 24.163046, 24.329568, 24.49609 , 24.662611, 24.829133,
           24.995655, 25.162177, 25.328699, 25.49522 , 25.661742, 25.828264,
           25.994786, 26.161308, 26.32783 , 26.494352, 26.660873, 26.827395,
           26.993917, 27.160439, 27.326961, 27.493482, 27.660004, 27.826526,
           27.993048, 28.15957 , 28.326092, 28.492613, 28.659135, 28.825657,
           28.992179, 29.158701, 29.325223, 29.491744, 29.658266, 29.824788,
           29.99131 ])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-a708e945-8de3-4df7-aa61-33d455a238db' class='xr-section-summary-in' type='checkbox'  checked><label for='section-a708e945-8de3-4df7-aa61-33d455a238db' class='xr-section-summary' >Data variables: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>bathymetry</span></div><div class='xr-var-dims'>(latitude, longitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-3.621e+03 -3.709e+03 ... nan nan</div><input id='attrs-0a9c045e-7e4c-4d88-93d7-fadb7df7eea9' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-0a9c045e-7e4c-4d88-93d7-fadb7df7eea9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d82723a4-69e8-46fe-b9d0-23edc1e8b1f9' class='xr-var-data-in' type='checkbox'><label for='data-d82723a4-69e8-46fe-b9d0-23edc1e8b1f9' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>metadata :</span></dt><dd>Generated by Chain(steps=[(&#x27;reduce&#x27;,
                  BlockReduce(reduction=&lt;function median at 0x7fab4c1501f0&gt;,
                              spacing=18500.0)),
                 (&#x27;trend&#x27;, Trend(degree=1)), (&#x27;spline&#x27;, Spline(mindist=0))])</dd></dl></div><div class='xr-var-data'><pre>array([[-3620.55693605, -3708.83531519, -3770.7186556 , ...,
             -382.20217909,    76.3077095 ,            nan],
           [-3685.6292116 , -3781.66923324,            nan, ...,
             -109.1371665 ,            nan,            nan],
           [-3649.29234912, -3814.40699881,            nan, ...,
             -584.59173005,            nan,            nan],
           ...,
           [           nan,            nan,            nan, ...,
                       nan,            nan,            nan],
           [           nan,            nan,            nan, ...,
                       nan,            nan,            nan],
           [           nan,            nan,            nan, ...,
                       nan,            nan,            nan]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-3ddfd1c8-e49f-487a-b299-9615814f730b' class='xr-section-summary-in' type='checkbox'  ><label for='section-3ddfd1c8-e49f-487a-b299-9615814f730b' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>longitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-afec4d0e-577e-4995-8980-a3de789e067b' class='xr-index-data-in' type='checkbox'/><label for='index-afec4d0e-577e-4995-8980-a3de789e067b' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([             245.0,  245.1673275862069,  245.3346551724138,
                   245.5019827586207, 245.66931034482758,  245.8366379310345,
                  246.00396551724137, 246.17129310344828,  246.3386206896552,
                  246.50594827586207, 246.67327586206898, 246.84060344827586,
                  247.00793103448277, 247.17525862068965, 247.34258620689656,
                  247.50991379310346, 247.67724137931035, 247.84456896551725,
                  248.01189655172413, 248.17922413793104, 248.34655172413792,
                  248.51387931034483, 248.68120689655174, 248.84853448275862,
                  249.01586206896553,  249.1831896551724, 249.35051724137932,
                   249.5178448275862,  249.6851724137931, 249.85250000000002,
                   250.0198275862069,  250.1871551724138,  250.3544827586207,
                   250.5218103448276, 250.68913793103448,  250.8564655172414,
                  251.02379310344827, 251.19112068965518,  251.3584482758621,
                  251.52577586206897, 251.69310344827588, 251.86043103448276,
                  252.02775862068967, 252.19508620689655, 252.36241379310346,
                  252.52974137931037, 252.69706896551725, 252.86439655172416,
                  253.03172413793104, 253.19905172413795, 253.36637931034483,
                  253.53370689655173, 253.70103448275864, 253.86836206896552,
                  254.03568965517243,  254.2030172413793, 254.37034482758622,
                   254.5376724137931,            254.705],
                 dtype=&#x27;float64&#x27;, name=&#x27;longitude&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>latitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-0eb7945b-72d4-431d-b8f1-f6cad01f8da6' class='xr-index-data-in' type='checkbox'/><label for='index-0eb7945b-72d4-431d-b8f1-f6cad01f8da6' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([              20.0, 20.166521833333334, 20.333043666666665,
                          20.4995655, 20.666087333333333, 20.832609166666668,
                           20.999131, 21.165652833333333, 21.332174666666667,
                          21.4986965, 21.665218333333332, 21.831740166666666,
                           21.998262,  22.16478383333333, 22.331305666666665,
                          22.4978275, 22.664349333333334, 22.830871166666668,
                           22.997393, 23.163914833333333, 23.330436666666667,
                  23.496958499999998, 23.663480333333332, 23.830002166666667,
                           23.996524,  24.16304583333333, 24.329567666666666,
                          24.4960895,  24.66261133333333, 24.829133166666665,
                           24.995655, 25.162176833333334, 25.328698666666668,
                          25.4952205, 25.661742333333333, 25.828264166666667,
                  25.994785999999998, 26.161307833333332, 26.327829666666666,
                          26.4943515, 26.660873333333335, 26.827395166666665,
                           26.993917,  27.16043883333333, 27.326960666666665,
                          27.4934825, 27.660004333333333, 27.826526166666667,
                  27.993047999999998, 28.159569833333332, 28.326091666666663,
                  28.492613499999997,  28.65913533333333, 28.825657166666666,
                           28.992179, 29.158700833333334, 29.325222666666665,
                          29.4917445,  29.65826633333333, 29.824788166666664,
                            29.99131],
                 dtype=&#x27;float64&#x27;, name=&#x27;latitude&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-e8113caf-06ab-4ef1-b4b9-78fc226538f4' class='xr-section-summary-in' type='checkbox'  checked><label for='section-e8113caf-06ab-4ef1-b4b9-78fc226538f4' class='xr-section-summary' >Attributes: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>metadata :</span></dt><dd>Generated by Chain(steps=[(&#x27;reduce&#x27;,
                  BlockReduce(reduction=&lt;function median at 0x7fab4c1501f0&gt;,
                              spacing=18500.0)),
                 (&#x27;trend&#x27;, Trend(degree=1)), (&#x27;spline&#x27;, Spline(mindist=0))])</dd></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 133-134

Finally, we can plot the resulting grid:

.. GENERATED FROM PYTHON SOURCE LINES 134-146

.. code-block:: default


    fig = pygmt.Figure()
    fig.coast(region=region, projection="M20c", land="#666666")
    fig.grdimage(
        grid=grid.bathymetry,
        cmap="viridis",
        nan_transparent=True,
    )
    fig.basemap(frame=True)
    fig.colorbar(frame='af+l"bathymetric depth [m]"')
    fig.show()




.. image-sg:: /tutorials/images/sphx_glr_chain_003.png
   :alt: chain
   :srcset: /tutorials/images/sphx_glr_chain_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>




.. GENERATED FROM PYTHON SOURCE LINES 147-150

Each component of the chain can be accessed separately using the
``named_steps`` attribute. It's a dictionary with keys and values matching
the inputs given to the :class:`~verde.Chain`.

.. GENERATED FROM PYTHON SOURCE LINES 150-154

.. code-block:: default


    print(chain.named_steps["trend"])
    print(chain.named_steps["spline"])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Trend(degree=1)
    Spline(mindist=0)




.. GENERATED FROM PYTHON SOURCE LINES 155-158

All gridders and estimators in the chain have been fitted and can be used to
generate grids and predictions. For example, we can get a grid of the
estimated trend:

.. GENERATED FROM PYTHON SOURCE LINES 158-174

.. code-block:: default


    grid_trend = chain.named_steps["trend"].grid(
        region=region,
        spacing=spacing,
        projection=projection,
        dims=["latitude", "longitude"],
        data_names="bathymetry",
    )
    grid_trend = vd.distance_mask(
        data_coordinates=(data.longitude, data.latitude),
        maxdist=spacing * 111e3,
        grid=grid_trend,
        projection=projection,
    )
    grid_trend






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
    Dimensions:     (latitude: 61, longitude: 59)
    Coordinates:
      * longitude   (longitude) float64 245.0 245.2 245.3 ... 254.4 254.5 254.7
      * latitude    (latitude) float64 20.0 20.17 20.33 20.5 ... 29.66 29.82 29.99
    Data variables:
        bathymetry  (latitude, longitude) float64 -4.911e+03 -4.864e+03 ... nan nan
    Attributes:
        metadata:  Generated by Trend(degree=1)</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-56158679-38f2-449d-8dfa-cb43bada6f64' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-56158679-38f2-449d-8dfa-cb43bada6f64' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>latitude</span>: 61</li><li><span class='xr-has-index'>longitude</span>: 59</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-3b0061b1-c313-4d4b-9b1f-c86b291e5f9e' class='xr-section-summary-in' type='checkbox'  checked><label for='section-3b0061b1-c313-4d4b-9b1f-c86b291e5f9e' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>longitude</span></div><div class='xr-var-dims'>(longitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>245.0 245.2 245.3 ... 254.5 254.7</div><input id='attrs-a66ab473-3b1f-4671-98ee-f97a57e6d5d1' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-a66ab473-3b1f-4671-98ee-f97a57e6d5d1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-916e02a7-2460-455e-be4c-e1899570bc1c' class='xr-var-data-in' type='checkbox'><label for='data-916e02a7-2460-455e-be4c-e1899570bc1c' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([245.      , 245.167328, 245.334655, 245.501983, 245.66931 , 245.836638,
           246.003966, 246.171293, 246.338621, 246.505948, 246.673276, 246.840603,
           247.007931, 247.175259, 247.342586, 247.509914, 247.677241, 247.844569,
           248.011897, 248.179224, 248.346552, 248.513879, 248.681207, 248.848534,
           249.015862, 249.18319 , 249.350517, 249.517845, 249.685172, 249.8525  ,
           250.019828, 250.187155, 250.354483, 250.52181 , 250.689138, 250.856466,
           251.023793, 251.191121, 251.358448, 251.525776, 251.693103, 251.860431,
           252.027759, 252.195086, 252.362414, 252.529741, 252.697069, 252.864397,
           253.031724, 253.199052, 253.366379, 253.533707, 253.701034, 253.868362,
           254.03569 , 254.203017, 254.370345, 254.537672, 254.705   ])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>latitude</span></div><div class='xr-var-dims'>(latitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>20.0 20.17 20.33 ... 29.82 29.99</div><input id='attrs-7c506d6d-2ffa-40b8-a927-ea8ace713714' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-7c506d6d-2ffa-40b8-a927-ea8ace713714' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-52340092-f99d-4360-9710-256091c15e2f' class='xr-var-data-in' type='checkbox'><label for='data-52340092-f99d-4360-9710-256091c15e2f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([20.      , 20.166522, 20.333044, 20.499565, 20.666087, 20.832609,
           20.999131, 21.165653, 21.332175, 21.498697, 21.665218, 21.83174 ,
           21.998262, 22.164784, 22.331306, 22.497827, 22.664349, 22.830871,
           22.997393, 23.163915, 23.330437, 23.496958, 23.66348 , 23.830002,
           23.996524, 24.163046, 24.329568, 24.49609 , 24.662611, 24.829133,
           24.995655, 25.162177, 25.328699, 25.49522 , 25.661742, 25.828264,
           25.994786, 26.161308, 26.32783 , 26.494352, 26.660873, 26.827395,
           26.993917, 27.160439, 27.326961, 27.493482, 27.660004, 27.826526,
           27.993048, 28.15957 , 28.326092, 28.492613, 28.659135, 28.825657,
           28.992179, 29.158701, 29.325223, 29.491744, 29.658266, 29.824788,
           29.99131 ])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-8a7f041b-a862-4773-b22e-1b2a7bbff416' class='xr-section-summary-in' type='checkbox'  checked><label for='section-8a7f041b-a862-4773-b22e-1b2a7bbff416' class='xr-section-summary' >Data variables: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>bathymetry</span></div><div class='xr-var-dims'>(latitude, longitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-4.911e+03 -4.864e+03 ... nan nan</div><input id='attrs-02a7e602-4a34-4c05-9c77-f56f174faca5' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-02a7e602-4a34-4c05-9c77-f56f174faca5' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-556052c6-c640-43aa-bf1e-576380756d8f' class='xr-var-data-in' type='checkbox'><label for='data-556052c6-c640-43aa-bf1e-576380756d8f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>metadata :</span></dt><dd>Generated by Trend(degree=1)</dd></dl></div><div class='xr-var-data'><pre>array([[-4910.61091961, -4864.15471186, -4817.6985041 , ...,
            -2309.06328524, -2262.60707748,            nan],
           [-4838.72028329, -4792.26407553,            nan, ...,
            -2237.17264891,            nan,            nan],
           [-4766.75196258, -4720.29575482,            nan, ...,
            -2165.2043282 ,            nan,            nan],
           ...,
           [           nan,            nan,            nan, ...,
                       nan,            nan,            nan],
           [           nan,            nan,            nan, ...,
                       nan,            nan,            nan],
           [           nan,            nan,            nan, ...,
                       nan,            nan,            nan]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-966096ad-8c03-47a0-89ac-b3e1011c1138' class='xr-section-summary-in' type='checkbox'  ><label for='section-966096ad-8c03-47a0-89ac-b3e1011c1138' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>longitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-f214e954-e6dc-4e0d-a066-47b6d023b115' class='xr-index-data-in' type='checkbox'/><label for='index-f214e954-e6dc-4e0d-a066-47b6d023b115' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([             245.0,  245.1673275862069,  245.3346551724138,
                   245.5019827586207, 245.66931034482758,  245.8366379310345,
                  246.00396551724137, 246.17129310344828,  246.3386206896552,
                  246.50594827586207, 246.67327586206898, 246.84060344827586,
                  247.00793103448277, 247.17525862068965, 247.34258620689656,
                  247.50991379310346, 247.67724137931035, 247.84456896551725,
                  248.01189655172413, 248.17922413793104, 248.34655172413792,
                  248.51387931034483, 248.68120689655174, 248.84853448275862,
                  249.01586206896553,  249.1831896551724, 249.35051724137932,
                   249.5178448275862,  249.6851724137931, 249.85250000000002,
                   250.0198275862069,  250.1871551724138,  250.3544827586207,
                   250.5218103448276, 250.68913793103448,  250.8564655172414,
                  251.02379310344827, 251.19112068965518,  251.3584482758621,
                  251.52577586206897, 251.69310344827588, 251.86043103448276,
                  252.02775862068967, 252.19508620689655, 252.36241379310346,
                  252.52974137931037, 252.69706896551725, 252.86439655172416,
                  253.03172413793104, 253.19905172413795, 253.36637931034483,
                  253.53370689655173, 253.70103448275864, 253.86836206896552,
                  254.03568965517243,  254.2030172413793, 254.37034482758622,
                   254.5376724137931,            254.705],
                 dtype=&#x27;float64&#x27;, name=&#x27;longitude&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>latitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-6e022c60-96a7-4e9c-8b87-f67324f72a1e' class='xr-index-data-in' type='checkbox'/><label for='index-6e022c60-96a7-4e9c-8b87-f67324f72a1e' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([              20.0, 20.166521833333334, 20.333043666666665,
                          20.4995655, 20.666087333333333, 20.832609166666668,
                           20.999131, 21.165652833333333, 21.332174666666667,
                          21.4986965, 21.665218333333332, 21.831740166666666,
                           21.998262,  22.16478383333333, 22.331305666666665,
                          22.4978275, 22.664349333333334, 22.830871166666668,
                           22.997393, 23.163914833333333, 23.330436666666667,
                  23.496958499999998, 23.663480333333332, 23.830002166666667,
                           23.996524,  24.16304583333333, 24.329567666666666,
                          24.4960895,  24.66261133333333, 24.829133166666665,
                           24.995655, 25.162176833333334, 25.328698666666668,
                          25.4952205, 25.661742333333333, 25.828264166666667,
                  25.994785999999998, 26.161307833333332, 26.327829666666666,
                          26.4943515, 26.660873333333335, 26.827395166666665,
                           26.993917,  27.16043883333333, 27.326960666666665,
                          27.4934825, 27.660004333333333, 27.826526166666667,
                  27.993047999999998, 28.159569833333332, 28.326091666666663,
                  28.492613499999997,  28.65913533333333, 28.825657166666666,
                           28.992179, 29.158700833333334, 29.325222666666665,
                          29.4917445,  29.65826633333333, 29.824788166666664,
                            29.99131],
                 dtype=&#x27;float64&#x27;, name=&#x27;latitude&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-12455517-a5bc-4532-b74d-9ea2401cd476' class='xr-section-summary-in' type='checkbox'  checked><label for='section-12455517-a5bc-4532-b74d-9ea2401cd476' class='xr-section-summary' >Attributes: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>metadata :</span></dt><dd>Generated by Trend(degree=1)</dd></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 176-187

.. code-block:: default


    fig = pygmt.Figure()
    fig.coast(region=region, projection="M20c", land="#666666")
    fig.grdimage(
        grid=grid_trend.bathymetry,
        cmap="viridis",
        nan_transparent=True,
    )
    fig.basemap(frame=True)
    fig.colorbar(frame='af+l"bathymetric depth [m]"')
    fig.show()



.. image-sg:: /tutorials/images/sphx_glr_chain_004.png
   :alt: chain
   :srcset: /tutorials/images/sphx_glr_chain_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <IPython.core.display.Image object>





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.391 seconds)


.. _sphx_glr_download_tutorials_chain.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: chain.py <chain.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: chain.ipynb <chain.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
